name: build-release

on:
  push:
    tags:
      - 'v*'  # 当推送标签时触发，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 需要写权限来创建 release
  actions: read    # 需要读权限来下载 artifacts

jobs:
  build:
    name: Build for multiple platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            output: mikomail-windows-amd64.exe
          - goos: windows
            goarch: 386
            output: mikomail-windows-386.exe
          - goos: windows
            goarch: arm64
            output: mikomail-windows-arm64.exe
          
          # Linux builds
          - goos: linux
            goarch: amd64
            output: mikomail-linux-amd64
          - goos: linux
            goarch: 386
            output: mikomail-linux-386
          - goos: linux
            goarch: arm64
            output: mikomail-linux-arm64
          - goos: linux
            goarch: arm
            output: mikomail-linux-arm
          
          # macOS builds
          - goos: darwin
            goarch: amd64
            output: mikomail-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: mikomail-darwin-arm64
          
          # FreeBSD builds
          - goos: freebsd
            goarch: amd64
            output: mikomail-freebsd-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'  # 根据您的项目需要调整Go版本

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        # 排除工具目录，只构建主程序
        go build -ldflags="-s -w" -o ${{ matrix.output }} ./main.go

        # 为 Linux/macOS/FreeBSD 添加执行权限
        if [ "${{ matrix.goos }}" != "windows" ]; then
          chmod +x ${{ matrix.output }}
        fi

    - name: Create release package
      run: |
        # 创建发布目录
        RELEASE_DIR="miko-email-${{ matrix.goos }}-${{ matrix.goarch }}"
        mkdir -p "$RELEASE_DIR"

        # 复制二进制文件
        cp ${{ matrix.output }} "$RELEASE_DIR/"

        # 复制必要的文件和目录
        cp config.yaml "$RELEASE_DIR/"
        cp -r web "$RELEASE_DIR/"
        cp -r tools "$RELEASE_DIR/"

        # 创建必要的目录
        mkdir -p "$RELEASE_DIR/dkim_keys"
        mkdir -p "$RELEASE_DIR/logs"
        mkdir -p "$RELEASE_DIR/data"

        # 复制文档文件
        cp README.md "$RELEASE_DIR/" 2>/dev/null || echo "README.md not found, skipping"
        cp "部署指南.txt" "$RELEASE_DIR/" 2>/dev/null || echo "部署指南.txt not found, skipping"
        cp "开发指南.txt" "$RELEASE_DIR/" 2>/dev/null || echo "开发指南.txt not found, skipping"
        cp "故障排除.txt" "$RELEASE_DIR/" 2>/dev/null || echo "故障排除.txt not found, skipping"

        # 创建压缩包
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows 使用 zip
          zip -r "${RELEASE_DIR}.zip" "$RELEASE_DIR"
          echo "PACKAGE_FILE=${RELEASE_DIR}.zip" >> $GITHUB_ENV
        else
          # Linux/macOS 使用 tar.gz
          tar -czf "${RELEASE_DIR}.tar.gz" "$RELEASE_DIR"
          echo "PACKAGE_FILE=${RELEASE_DIR}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: miko-email-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.PACKAGE_FILE }}
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts/

    - name: Create Release and Upload Assets
      run: |
        # 创建 Release
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --notes "## Miko Email Server ${{ github.ref_name }}

          ### 下载说明
          - Windows 用户请下载 \`mikomail-windows-amd64.exe\`
          - Linux 用户请下载 \`mikomail-linux-amd64\`
          - macOS Intel 用户请下载 \`mikomail-darwin-amd64\`
          - macOS Apple Silicon 用户请下载 \`mikomail-darwin-arm64\`

          ### 使用方法
          1. 下载对应平台的执行文件
          2. 给文件添加执行权限（Linux/macOS）: \`chmod +x mikomail-*\`
          3. 运行程序: \`./mikomail-*\`

          ### 更新内容
          请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细更新内容。"

        # 上传所有构建的文件到 Release
        for dir in ./artifacts/*/; do
          for file in "$dir"*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
